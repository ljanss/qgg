% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiple_marker_set_test.R
\name{cvat}
\alias{cvat}
\title{Genetic marker set tests based on the covariance test}
\usage{
cvat(fit = NULL, s = NULL, g = NULL, W = NULL, sets = NULL,
  nperm = 100)
}
\arguments{
\item{fit}{is the fit object obtained from a linear mixed model fit using the greml function}

\item{s}{vector (or list) of single marker effects obtained from a linear mixed model fit (GBLUP of GFBLUP)}

\item{g}{vector (or list) of genetic effects obtained from a linear mixed model fit (GBLUP of GFBLUP)}

\item{W}{matrix of centered and scaled genotypes (n x m)}

\item{sets}{list of marker sets corresponding to columns in W}

\item{nperm}{number of permutations}
}
\value{
Returns a dataframe including 
\item{setT}{covariance test statistics} 
\item{nset}{number of markers in the set}
\item{p}{p-value}
}
\description{
Genetic marker set tests based on the covariance statistics for a set of genetic markers.
}
\details{
The covariance test statistic is derived from a GBLUP (or GFBLUP) model fit. It is a measure of covariance between the total genomic effect for all markers 
and the genomic effect for the genetic markers in the genomic feature. It also relates to the explained sums of
squares for the genetic markers. 
The distribution of this test statistic under the null hypothesis is difficult to describe in terms of exact or approximate 
distributions, and an empirical distribution is required.
}
\examples{

# Simulate data
W <- matrix(rnorm(20000000), ncol = 10000)
	colnames(W) <- as.character(1:ncol(W))
	rownames(W) <- as.character(1:nrow(W))
y <- rowSums(W[, 1:10]) + rowSums(W[, 1001:1010]) + rnorm(nrow(W))

# Create model
data <- data.frame(y = y, mu = 1)
fm <- y ~ 0 + mu
X <- model.matrix(fm, data = data)

# Create framework for lists
setsGB <- list(A = colnames(W)) # gblup model
setsGF <- list(C1 = colnames(W)[1:1000], C2 = colnames(W)[1001:2000], C3 = colnames(W)[2000:10000]) # gfblup model
setsGT <- list(C1 = colnames(W)[1:10], C2 = colnames(W)[1001:1010], C3 = colnames(W)[1:10000]) # true model

# Compute G
G <- computeG(W = W)
GB <- lapply(setsGB, function(x) {computeG(W = W[, x])})
GF <- lapply(setsGF, function(x) {computeG(W = W[, x])})
GT <- lapply(setsGT, function(x) {computeG(W = W[, x])})

# REML analyses and multi marker association (set) test
fitGB <- greml(y = y, X = X, G = GB, verbose = TRUE)

# Use fit object as input
cvat(fit = fitGB, W = W, sets = setsGF, nperm = 1000)
cvat(fit = fitGB, W = W, sets = setsGT, nperm = 1000)

# Use single coefficients as input 
s <- crossprod(W / ncol(W), fitGB$Py) * fitGB$theta[1]
cvat(s = s, W = W, sets = setsGF, nperm = 1000)
cvat(s = s, W = W, sets = setsGT, nperm = 1000)

}
\author{
Peter SÃ¸rensen
}
