% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gfm.R
\name{gfm}
\alias{gfm}
\title{Genomic Feature Model analyses implemented using Likelihood Methods (small data)}
\usage{
gfm(fm = NULL, weights = NULL, W = NULL, sets = NULL, G = NULL,
  data = NULL, validate = NULL, mkplots = FALSE)
}
\arguments{
\item{fm}{formula with model statement for the fixed factors in the linear mixed model}

\item{weights}{vector of weights for the residual variance}

\item{W}{matrix centered and scaled genotypes or other types of molecular data}

\item{sets}{list of marker sets corresponding to column names in W}

\item{G}{list of relationship / correlation matrices}

\item{data}{data frame containing the phenotypic observations and fixed factors specified in the model statements}

\item{validate}{matrix or a list with the ids of validation sets corresponding to the rows in data}

\item{mkplots}{logical indicating whether or not to make plots}
}
\value{
Returns results in a list structure including 
\item{f}{matrix of predicted random effects (training set)} 
\item{fv}{matrix of predicted random effects validation set} 
\item{Vf}{covariance of predicted random effects} 
\item{s}{single marker effects} 
\item{vs}{variance of single marker effects} 
\item{sigmas}{estimated variance components} 
\item{pa}{predictive ability based on validation sets} 
\item{mspe}{mean squared prediction error based on validation sets} 
\item{ypred}{predicted phenotypes validation set} 
\item{yobs}{observed phenotypes validation set} 
\item{fit}{fit object from regress} 
\item{validate}{matrix of validation sets as provided in arguments}
}
\description{
Genomic Feature Best Linear Unbiased Prediction models implemented using REML. 
Multiple features and multiple traits models can be fitted.
Different genetic models (e.g. additive, dominance, gene by gene and gene by environment interactions) can be specified.
}
\details{
The models are implemented using restricted maximum likelihood methods. 
Variance components estimated using REML and predictions are based on BLUP. 
First and second derivatives of log-likehood can be obtained in addition to asymtotic standard deviation of parameter estimates.
Predicted random effects and single marker effects and statistics can be obtained.
Covariance decomposition procedures.
Cross validation procedures for assessment of prediction accuracy and model selection. 
Currently depend on R library regress. 
Plug-in avaliable for DMU. Future release may use customized REML procedures.
}
\examples{

# Simulate data
W <- matrix(rnorm(2000000), ncol = 10000)
  colnames(W) <- as.character(1:ncol(W))
y <- rowSums(W[, 1:10]) + rowSums(W[, 1001:1010]) + rnorm(nrow(W))


# Ex. model 1: simple 
data <- data.frame(y = y, mu = 1)
fm <- y ~ mu

# Create framework for lists
setsGB <- list(A = colnames(W)) # gblup model
setsGF <- list(C1 = colnames(W)[1:1000], C2 = colnames(W)[1001:2000], C3 = colnames(W)[2000:10000])   # gfblup model
setsGT <- list(C1 = colnames(W)[1:10], C2 = colnames(W)[1001:1010], C3 = colnames(W)[1:10000]) # true model

# REML analyses and cross validation
n <- length(y)
fold <- 10
nsets <- 50

# Validation sets may be inputted as matrices or lists
validate <- replicate(nsets, sample(1:n, as.integer(n / fold))) # matrix input
  fitGB <- gfm(fm = fm, W = W, sets = setsGB, data = data, validate = validate)
  fitGF <- gfm(fm = fm, W = W, sets = setsGF, data = data, validate = validate)
  fitGT <- gfm(fm = fm, W = W, sets = setsGT, data = data, validate = validate)

validClust <- list(C1 = 1:40, C2 = 41:77) # list input
  fitGB <- gfm(fm = fm, W = W, sets = setsGB, data = data, validate = validClust)
  fitGF <- gfm(fm = fm, W = W, sets = setsGF, data = data, validate = validClust)
  fitGT <- gfm(fm = fm, W = W, sets = setsGT, data = data, validate = validClust)


# Ex. model 2: more complex
data <- data.frame(y = y, mu = 1)
fm <- y ~ mu
fit <- gfm(fm = fm, W = W, sets = list(colnames(W)), data = data)

# REML analyses and cross validation
pc1 <- rnorm(200)
pc2 <- rnorm(200)
f1 <- factor(rep(1:2, 100))

fmf <- y ~ pc1 + pc2 + f1

fitGB <- gfm(fm = fmf, W = W, data = data.frame(y, pc1, pc2, f1), validate = validate)
fitGF <- gfm(fm = fmf, W = W, sets = setsGF, data = data.frame(y, pc1, pc2, f1), validate = validate)
fitGT <- gfm(fm = fmf, W = W, sets = setsGT, data = data.frame(y, pc1, pc2, f1), validate = validate)

}
\author{
Peter SÃ¸rensen
}
